---
title: Open Science Survey
logo: "images/oscl-logo.png"
format: 
  dashboard:
    theme: custom.scss
server: shiny
---

```{r}
#| context: setup

#library(here)
library(dplyr)
library(ggplot2)
library(shiny)
library(stringi)
library(forcats)
library(tidyr)
library(bslib)
library(bsicons)

ggplot2::theme_set(ggplot2::theme_minimal())

responses_2025 <- readr::read_csv("https://raw.githubusercontent.com/bbartholdy/os-survey-unileiden/refs/heads/main/data/2025_responses-wide.csv")
responses_2023 <- readr::read_csv("https://raw.githubusercontent.com/bbartholdy/os-survey-unileiden/refs/head/main/data/2023_responses-wide.csv")
questions <- readr::read_csv("data/2025_questions.csv")

# join data from 2023 and 2025
response_data <- responses_2025 |>
  select(!`2025_new_q_other`) |>
  add_row(responses_2023)

questions <- mutate(questions, options = gsub(";", "<br>", options))
multiple_choice <- c(
  "familiarity",
  "implement",
  "motivation",
  "barriers",
  "stimulate"
)
sci_support <- c(
  "Policy advisor", 
  "Organisational Professional / Support Staff"
)
sci_staff <- c(
  "PhD candidate",
  "Postdoc",
  "Assistant Professor",
  "Associate Professor",
  "Full Professor",
  "Researcher",
  "Teacher"
)
sci_staff_responses <- filter(response_data, position %in% sci_staff)
sci_support_responses <- filter(response_data, position %in% sci_support)
faculties <- unique(response_data$faculty)
```


# Survey statistics

## Row {height="18%"}

```{r}
value_box(
  title = "2023",
  value = nrow(filter(response_data, wave == 2023)),
  showcase = bs_icon("reply-all"),
  theme = value_box_theme(bg = "#001158a3", fg = "#fff"),
  strong("Total responses")
  #min_height = "200px"
)
```


```{r}
value_box(
  title = "2023",
  value = textOutput("nSelect"),
  showcase = bs_icon("filter"),
  theme = value_box_theme(bg = "#a8c9daa3", fg = "#001158a3"),
  strong("Responses in Selection"),
  #min_height = "200px"
)
```

```{r}
value_box(
  title = "2023",
  value = textOutput("responseTime"),
  showcase = bs_icon("clock"),
  theme = value_box_theme(bg = "#0070c0a3", fg = "#fff"),
  strong("Median response time")
  #min_height = "200px"
)
```

## Row {height="18%"}

```{r}
value_box(
  title = "2025",
  value = nrow(filter(response_data, wave == 2025)),
  showcase = bs_icon("reply-all"),
  theme = value_box_theme(bg = "#001158", fg = "#fff"),
  strong("Total responses")
  #min_height = "200px"
)
```


```{r}
value_box(
  title = "2025",
  value = textOutput("nSelect2025"),
  showcase = bs_icon("filter"),
  theme = value_box_theme(bg = "#a8c9da", fg = "#001158"),
  strong("Responses in Selection")
  #min_height = "200px"
)
```

```{r}
value_box(
  title = "2025",
  value = textOutput("responseTime2025"),
  showcase = bs_icon("clock"),
  theme = value_box_theme(bg = "#0070c0", fg = "#fff"),
  strong("Median response time")
  #min_height = "200px"
)
```

## Column {.tabset title="Responses from academic positions"}

```{r}
#| content: card-toolbar
selectInput("facultyInput", "Faculty", choices = c("All", na.omit(faculties)))
#radioButtons("group", "Response type", choices = c("Sci staff", "Sci support"))
```

### 2025

```{r}
plotOutput("faculty_response_plot_2025")
```

### 2023

```{r}
plotOutput("faculty_response_plot")
```

# Responses

## Row {height="16%"}

```{r}
#| content: card-toolbar
#| title: Question text
selectInput("questionInput", "", choices = c(multiple_choice))
```

```{r}
#| width: "60%"
textOutput("question")
```

```{r}
#| content: toolbar
selectInput("facultyInput2", "Faculty", choices = c("All", faculties))
radioButtons("groupInput", "Group by", choices = c("none", "position", "faculty"))
```


## Row {.tabset title="Table with number of responses per option"}

### 2025

```{r}
plotOutput("responses_plot_2025")
```

```{r}
dataTableOutput("responses_tbl_2025")
```

### 2023

```{r}
plotOutput("responses_plot_2023")
```

```{r}
dataTableOutput("responses_tbl_2023")
```


# Data

```{r}
dataTableOutput("datatable")
```

# About

::: {.card title="Summary" fill="false"}

![](images/comb-logo.png){width="500"}

This quickscan was conducted in 2023 to explore how staff and researchers at Leiden University are engaging with Open
Science. What are the common incentives and barriers, and what more can the University
do to encourage more open research? The
[Open Science Community Leiden](https://www.universiteitleiden.nl/open-science-community-leiden)
teamed up with the Leiden University
[Open Science Program](https://www.staff.universiteitleiden.nl/news/2022/11/academia-in-motion-the-university-is-making-headway-towards-better-academic-practice?cf=service-units)
to create this quickscan for assessing the Open Science engagement among university researchers, policy advisors, and
support staff. The results will be used to inform development of resources, and identify areas in
need of improvement, to move Leiden University towards a more open future.

We are currently in the process of preparing another wave of the survey. It will be started during Open Science Week 2025.
:::

```{r}
#| label: question-dict
#| title: Question code dictionary
questions |>
  mutate(question = gsub("\n", "", question)) |>
  select(!c(qid, force_resp)) |>
  knitr::kable(col.names = c("Code", "Question", "Options"))
```


<!-- Server -->

```{r}
#| context: server

statistics_data_2023 <- reactive({
  if(input$facultyInput != "All"){
    filter(response_data, faculty == input$facultyInput, wave == 2023)
  } else {
    filter(response_data, wave == 2023)
  }
})

statistics_data_2025 <- reactive({
  if(input$facultyInput != "All"){
    filter(response_data, faculty == input$facultyInput, wave == 2025)
  } else {
    filter(response_data, wave == 2025)
  }
})

responses <- reactive({
    if(input$facultyInput2 != "All"){
    filter(response_data, faculty == input$facultyInput2, wave == 2023)
  } else {
    filter(response_data, wave == 2023)
  }
})

responses_2025 <- reactive({
    if(input$facultyInput2 != "All"){
    filter(response_data, faculty == input$facultyInput2, wave == 2025)
  } else {
    filter(response_data, wave == 2025)
  }
})

## PAGE: Survey statistics
# Value boxes
output$nSelect <- renderText({
  nrow(statistics_data_2023())
})

output$nSelect2025 <- renderText({
  nrow(statistics_data_2025())
})

# median response time for value box
output$responseTime <- renderText({
  paste(round(median(statistics_data_2023()$Duration, na.rm = TRUE) / 60), "mins")
})

output$responseTime2025 <- renderText({
  paste(round(median(statistics_data_2025()$Duration, na.rm = TRUE) / 60), "mins")
})

output$faculty_response_plot <- renderPlot({
  statistics_data_2023() |>
  filter(
    !is.na(position)
  ) |>
    ggplot(aes(y = fct_rev(fct_infreq(position)))) +
      geom_bar(fill = "#0070c0") +
      labs(y = "Position")
})

output$faculty_response_plot_2025 <- renderPlot({
  statistics_data_2025() |>
  filter(
    !is.na(position)
  ) |>
    ggplot(aes(y = fct_rev(fct_infreq(position)))) +
      geom_bar(fill = "#0070c0") +
      labs(y = "Position")
})

## PAGE: Responses
output$question <- renderText({
  filter(questions, qname == input$questionInput)$question
})

# Reactive plot showing number of responses to selected question

output$responses_plot_2023 <- renderPlot({
  pl_data <- responses() |>
    select(!contains("TEXT")) |>
    pivot_longer(starts_with(input$questionInput), names_to = "code", values_to = "resp") |>
    mutate(resp = stringr::str_wrap(resp, width = 40)) |> # make long options wrap around
    remove_missing(vars = "resp")
  pl <- pl_data |>
    ggplot(aes(y = fct_rev(fct_infreq(resp)))) +
      geom_bar() +
      labs(y = "Response option") +
      theme(legend.position = "none")
  
  if(input$groupInput != "none") pl + scale_fill_viridis_d() + aes(fill = .data[[input$groupInput]]) + theme(legend.position = "top") else pl
      
})

output$responses_plot_2025 <- renderPlot({
  pl_data <- responses_2025() |>
    select(!contains("TEXT")) |>
    pivot_longer(starts_with(input$questionInput), names_to = "code", values_to = "resp") |>
    mutate(resp = stringr::str_wrap(resp, width = 30)) |> # make long options wrap around
    remove_missing(vars = "resp")
  pl <- pl_data |>
    ggplot(aes(y = fct_rev(fct_infreq(resp)))) +
      geom_bar() +
      labs(y = "Response option")
  
  if(input$groupInput != "none") pl + scale_fill_viridis_d() + aes(fill = .data[[input$groupInput]]) + theme(legend.position = "top") else pl
      
})

output$responses_tbl_2023 <- DT::renderDT({
  responses() |>
    select(!contains("TEXT")) |>
    pivot_longer(starts_with(input$questionInput), names_to = "code", values_to = "resp") |>
    remove_missing(vars = "resp") |>
    (\(x) if(input$groupInput != "none") group_by(x, .data[[input$groupInput]]) else x )() |>
    count(resp) |>
    arrange(desc(n), .by_group = TRUE) |>
    rename(Option = resp) |> # rename column for table
    DT::datatable(
      options = list(dom = "t")
    )
})

output$responses_tbl_2025 <- DT::renderDT({
  responses_2025() |>
    select(!contains("TEXT")) |>
    pivot_longer(starts_with(input$questionInput), names_to = "code", values_to = "resp") |>
    remove_missing(vars = "resp") |>
    (\(x) if(input$groupInput != "none") group_by(x, .data[[input$groupInput]]) else x )() |>
    count(resp) |>
    arrange(desc(n), .by_group = TRUE) |>
    rename(Option = resp) |> # rename column for table
    DT::datatable(
      options = list(dom = "t")
    )
})

## Data
output$datatable <- DT::renderDT({
  response_data |>
    select(!c(ends_with("TEXT"))) |>
    mutate(across( # convert to factor for better filtering with DT
      position |
        starts_with("barriers") |
        starts_with("familiarity") |
        starts_with("implement") |
        starts_with("stimulate"),
      as.factor
    )) |>
    DT::datatable(
      filter = "top",
      extensions = "Buttons",
      options = list(
        dom = "Bftip",
        buttons = c("csv", "excel", "colvis")
      )
    )
})
```
